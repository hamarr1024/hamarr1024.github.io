import{_ as n,o as s,c as a,a as p}from"./app-T0ug101R.js";const e="/assets/1707844733273-i6bu-OK_.png",t="/assets/1707893745469-YTnnKEag.png",o="/assets/1707893925321-nc_RuW9T.png",c="/assets/1707894636696-lOclLZE1.png",l="/assets/1707896271016-LUJC-0hR.png",i="/assets/1707896661744-3ludIi7t.png",u={},r=p('<h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><ol><li>Bianary Search Tree, 简称BST</li><li>任意一个节点的值都大于所有左子树的所有节点的值</li><li>任意一个节点的值都小于所有右子树的所有节点的值</li><li>它的任意左右子树也是一颗二叉搜索树</li><li>二叉搜索树存储的元素必须具有可比较性</li><li>不允许为null</li></ol><p><img src="'+e+`" alt="1707844733273"></p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><h3 id="_1-二叉树接口" tabindex="-1"><a class="header-anchor" href="#_1-二叉树接口" aria-hidden="true">#</a> 1.二叉树接口</h3><p>首先BST是一颗二叉树，所以可以定义二叉树接口,</p><ul><li>节点Node接口，规定了一个节点需要有left, right, parent属性和访问方法</li><li>二叉树BinaryTree接口，规定了一颗二叉树需要包含root根节点，还要提供对于某个节点的增删改查的方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BinaryTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">E</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">E</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">E</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">hasLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">hasRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-二叉搜索树实现" tabindex="-1"><a class="header-anchor" href="#_2-二叉搜索树实现" aria-hidden="true">#</a> 2. 二叉搜索树实现</h3><p>定义BinarySearchTree实现BinaryTree接口，定义BinarySearchTree内部类Node实现BinaryTree.Node接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">BinaryTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">BinaryTree<span class="token punctuation">.</span>Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">E</span> element<span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">,</span>right<span class="token punctuation">,</span> parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-size-和-isempty" tabindex="-1"><a class="header-anchor" href="#_2-1-size-和-isempty" aria-hidden="true">#</a> 2.1 size() 和 isEmpty()</h4><p>因为使用了一个size变量记录元素个数，调用add的时候执行++， 调用remove的时候执行--, 所以size()可以直接返回，isEmpty()就是判断size是否为0</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-find-根据值查找节点" tabindex="-1"><a class="header-anchor" href="#_2-2-find-根据值查找节点" aria-hidden="true">#</a> 2.2 find() 根据值查找节点</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertNonNull</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token string">&quot;element&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> cmp <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-predecessor-前驱节点-successor-后继节点" tabindex="-1"><a class="header-anchor" href="#_2-3-predecessor-前驱节点-successor-后继节点" aria-hidden="true">#</a> 2.3 predecessor() 前驱节点， successor() 后继节点</h4><p>这两个方法定位私有方法，因为后续删除操作会用到。</p><p>所谓前驱或者后继是指二叉树某个节点按中序遍历顺序的前一个节点，或者后一个节点。</p><blockquote><p><strong>寻找前驱节点的算法</strong></p><p>根据BST的性质，中序遍历是升序的，所以前驱就是找第一个比目标节点小的那个节点</p><ul><li>情况1：目标节点为null, 直接返回null</li><li>情况2：目标节点左子树不为空，那前驱节点就是左子树的最右节点</li><li>情况3：目标节点左子树为空，那前驱节点就是找第一个比目标节点小的父节点，这又可以分3种情况 <ul><li>情况3.1: 目标节点的父节点为空，那么目标节点没有前驱节点</li><li>情况3.2: 目标节点是父节点的右子节点，则父节点就是前驱节点</li><li>情况3.3: 目标节点是父亲节点的左子节点，则继续找父亲的父亲，直到遇到情况3.1或者情况3.2</li></ul></li></ul><p>可以看到情况3稍微复杂，并且是一个迭代的过程，需要2个指针，一个指针指向当前节点，一个指针指向父节点，返回的结果就是父节点，通过这种迭代是可以统一 3.1-3.3这3种情况的编码。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 情况1</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
       <span class="token comment">// 情况2</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
           <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
           <span class="token keyword">return</span> p<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token comment">// 情况3</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">==</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>寻找后继节点的算法</p><p>可以参考寻找前驱节点的算法进行讨论，可以看到寻找的算法是&quot;对称&quot;的，编码也是&quot;对称&quot;的，把right改成left, left改成right</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">successor</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token keyword">return</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//往上找</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">==</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-add-插入操作" tabindex="-1"><a class="header-anchor" href="#_2-4-add-插入操作" aria-hidden="true">#</a> 2.4. add()插入操作</h4><blockquote><p><strong>插入的算法</strong></p><ol><li>如果根节点为空，直接创建一个新节点，并赋值给root，返回</li><li>如果根节点不为空，从根节点开始遍历，直到当前节点为空，将当前节点与目标值比较，比较的结果cmp有三种 <ol><li>cmp &lt; 0, 从当前值的左子树继续遍历</li><li>cmp &gt;0, 从当前值的右子树继续遍历</li><li>cmp=0, 覆盖当前值，退出并返回</li><li>重复1-3，直到当前节点是叶子节点(左子树和右子树都为空)</li></ol></li><li>根据叶子节点和目标值的大小关系，插入叶子节点的左子节点或者右子节点</li></ol></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>
        <span class="token keyword">int</span> cmp<span class="token punctuation">;</span>

        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            parent <span class="token operator">=</span> p<span class="token punctuation">;</span>
            cmp <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> parent<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token keyword">else</span> parent<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-remove-删除操作" tabindex="-1"><a class="header-anchor" href="#_2-5-remove-删除操作" aria-hidden="true">#</a> 2.5 remove()删除操作</h4><p>删除的操作就比较复杂，需要分情况讨论，讨论的维度是节点的度</p><blockquote><p><strong>删除的算法</strong></p><p>情况1：删除度为0的节点</p><p>度为0，也是叶子节点，直接断开连接即可</p><p><img src="`+t+'" alt="1707893745469"></p><p>情况2：删除度为1的节点，</p><p>拥有1个子节点，就用子节点替换当前节点。这里可以详细讨论下，发现不管是删除的左子节点还是右子节点都是可以直接用子节点替换</p><ol><li>删除的节点父节点是空，也就是要删除根节点，则把根节点的子节点变为根节点</li><li>删除的节点是父节点的 <code>左子节点</code>，则不管被删除节点的子节点是左子结点还是右子节点，都赋值给被删除节点的父节点的 <code>左子节点</code></li><li>删除的节点是父节点的 <code>右子节点</code>，则不管被删除节点的子节点是左子结点还是右子节点，都赋值给被删除节点的父节点的 <code>右子节点</code></li></ol><p><img src="'+o+'" alt="1707893925321"></p><p><img src="'+c+'" alt="1707894636696"></p><p>情况3：删除度为2的节点。</p><p>这里稍稍复杂一点，常用的算法是，</p><ol><li>寻找目标节点的前驱节点或者后继节点，将找到的节点值覆盖当前节点值，然后删除前驱或者后继节点。</li><li>由于度为2（这个很关键)，所以前驱节点和后继节点一定是度为0或者1的节点，因此删除前驱或者后继节点就转换为情况1或2</li></ol><p>以使用后继节点来删除来举例，比如删除7，其后继节点是11，</p><ol><li>由于 11在7的右子树, 11一定&gt;7的左子树；</li><li>由于11是7的右子树的最左节点，11是7的右子树的最小值，所以11&lt;7的右子树，</li></ol><p>因此替换后BST的性质保持不变。使用前驱节点删除也可以得到类似的结论。</p><p><img src="'+l+'" alt="1707896271016"></p><p><img src="'+i+`" alt="1707896661744"></p></blockquote><p>代码实现。</p><p>注意deleteNode()的方法的小技巧，</p><ol><li>先处理度为2的节点，找到后继节点，</li><li>用后继节点的值覆盖当前节点，</li><li>然后把node指向successor后继节点，</li><li>再处理度为0或者1的情况。</li></ol><p>往往我们分析的时候是自上而下，从一般到特殊，而实现的时候是自下而上，从特殊到一般。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">E</span> oldValue <span class="token operator">=</span> p<span class="token punctuation">.</span>element<span class="token punctuation">;</span>
        <span class="token function">deleteNode</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        size<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token comment">// 度为2</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">degree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token function">successor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>element <span class="token operator">=</span> s<span class="token punctuation">.</span>element<span class="token punctuation">;</span>
            node <span class="token operator">=</span> s<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// node的度一定是0或者1</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> replacement <span class="token operator">=</span> node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> node<span class="token punctuation">.</span>left <span class="token operator">:</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token comment">// 度为1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>replacement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            replacement<span class="token punctuation">.</span>parent <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                root <span class="token operator">=</span> replacement<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> replacement<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> replacement<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// node断开连接</span>
            node<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 度为0, node是叶子节点</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            node<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码和结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBSTRemove</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">BinarySearchTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> bst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearchTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;============== 初始化BST =================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BinaryTrees</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BinaryTrees</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>bst<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入要删除的元素: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> toDel <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bst<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>toDel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;============= 删除后 =================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">BinaryTrees</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">BinaryTrees</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;FINISH!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> 初始化<span class="token constant">BST</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
    ┌──<span class="token number">7</span>──┐
    │     │
  ┌─<span class="token number">4</span>─┐ ┌─<span class="token number">9</span>─┐
  │   │ │   │
┌─<span class="token number">2</span>─┐ <span class="token number">5</span> <span class="token number">8</span>   <span class="token number">11</span>─┐
│   │          │
<span class="token number">1</span>   <span class="token number">3</span>          <span class="token number">12</span>─┐
                  │
                  <span class="token number">21</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">1</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
  ┌──<span class="token number">7</span>──┐
  │     │
┌─<span class="token number">4</span>─┐ ┌─<span class="token number">9</span>─┐
│   │ │   │
<span class="token number">2</span>─┐ <span class="token number">5</span> <span class="token number">8</span>   <span class="token number">11</span>─┐
  │          │
  <span class="token number">3</span>          <span class="token number">12</span>─┐
                │
                <span class="token number">21</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">21</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
  ┌──<span class="token number">7</span>──┐
  │     │
┌─<span class="token number">4</span>─┐ ┌─<span class="token number">9</span>─┐
│   │ │   │
<span class="token number">2</span>─┐ <span class="token number">5</span> <span class="token number">8</span>   <span class="token number">11</span>─┐
  │          │
  <span class="token number">3</span>          <span class="token number">12</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">11</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
  ┌──<span class="token number">7</span>──┐
  │     │
┌─<span class="token number">4</span>─┐ ┌─<span class="token number">9</span>─┐
│   │ │   │
<span class="token number">2</span>─┐ <span class="token number">5</span> <span class="token number">8</span>   <span class="token number">12</span>
  │
  <span class="token number">3</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">2</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
  ┌──<span class="token number">7</span>──┐
  │     │
┌─<span class="token number">4</span>─┐ ┌─<span class="token number">9</span>─┐
│   │ │   │
<span class="token number">3</span>   <span class="token number">5</span> <span class="token number">8</span>   <span class="token number">12</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">4</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
  ┌─<span class="token number">7</span>─┐
  │   │
┌─<span class="token number">5</span> ┌─<span class="token number">9</span>─┐
│   │   │
<span class="token number">3</span>   <span class="token number">8</span>   <span class="token number">12</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">7</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
  ┌─<span class="token number">8</span>─┐
  │   │
┌─<span class="token number">5</span>   <span class="token number">9</span>─┐
│       │
<span class="token number">3</span>       <span class="token number">12</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">8</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
  ┌─<span class="token number">9</span>─┐
  │   │
┌─<span class="token number">5</span>   <span class="token number">12</span>
│
<span class="token number">3</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">5</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
┌─<span class="token number">9</span>─┐
│   │
<span class="token number">3</span>   <span class="token number">12</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">9</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
┌─<span class="token number">12</span>
│
<span class="token number">3</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">12</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token number">3</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">11</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token number">3</span>
输入要删除的元素<span class="token operator">:</span> <span class="token number">3</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 删除后 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token constant">FINISH</span><span class="token operator">!</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-bst操作复杂度分析" tabindex="-1"><a class="header-anchor" href="#_3-bst操作复杂度分析" aria-hidden="true">#</a> 3. BST操作复杂度分析</h2><ol><li>size() : O(1)</li><li>isEmpty(): O(1)</li><li>find(): 由于BST的性质本质就是二分法，最差时间复杂度是O(n) (退化成链表)， 平均时间复杂度是O(logn)</li><li>add(): 先要找到可以插入的叶子节点位置，也就是find()方法的平均时间复杂度，也是O(logn), 然后执行添加元素操作，这是O(1), 因此总的平均时间复杂度是O(logn)</li><li>predecessor(), successor(): 最坏时间复杂度是O(n) (退化为链表)，平均时间复杂度是O(logn)</li><li>remove(): 最坏的情况是处理度为2，先要找到前驱/后继节点，平均复杂度是O(logn)，值覆盖和删除度为0或者1的操作都是简单的指针操作，复杂度O(1), 因此总的平均时间复杂度是O(logn)</li></ol><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>BST是学习AVL树和红黑树的基础，自平衡树的添加和删除操作也只是在BST添加和删除操作上加上了rebalance的操作。因此必须好好理解BST。</p><ol><li>BST的概念：首先是一颗二叉树，然后任意节点的左子树小于根节点，右子树大于根节点，左右子树分别也是BST</li><li>代码实现：首先定义了二叉树的接口和节点接口，定义了一颗二叉树应该有的通用操作。BST的实现类实现了这2个接口，这里重点总结下add和remove操作 <ol><li>add操作分了2种情况讨论 <ul><li>情况1：根节点为空，直接创建新节点</li><li>情况2: 根节点非空，从根节点开始遍历到叶子节点，插入即可</li></ul></li><li>remove操作比较复杂，根据要删除节点度的不同，分了3种情况讨论 <ul><li>情况1：删除度为0的节点。也就是叶子节点，将父节点的子节点置为null。</li><li>情况2：删除度为1的节点。使用子节点替换自己。实现的时候也要注意当前节点是根节点的情况，防止空指针异常</li><li>情况3：删除度为2的节点。删除操作可以转化 <code>替换+删除</code>。由于BST的性质，替换的节点只能是前驱节点或者后继节点，又由于度为2，因此前驱和后继节点的度一定为1或者0。因此可以先用前驱或者后继节点的值替换当前节点的值，然后删除前驱和后继节点就转化为情况1和情况2.</li><li>注意以上3种情况在实现的时候，注意既是叶子节点是根节点的情况，防止空指针异常。</li></ul></li></ol></li><li>BST操作复杂度分析</li></ol><table><thead><tr><th>操作</th><th>最差时间复杂度</th><th>平均时间复杂度</th></tr></thead><tbody><tr><td>size()</td><td>O(1)</td><td>O(1)</td></tr><tr><td>isEmpty()</td><td>O(1)</td><td>O(1)</td></tr><tr><td>find()</td><td>O(n)</td><td>O(logn)</td></tr><tr><td>predecessor()</td><td>O(n)</td><td>O(logn)</td></tr><tr><td>successor()</td><td>O(n)</td><td>O(logn)</td></tr><tr><td>add</td><td>O(n)</td><td>O(logn)</td></tr><tr><td>remove</td><td>O(n)</td><td>O(logn)</td></tr></tbody></table>`,44),k=[r];function d(v,m){return s(),a("div",null,k)}const g=n(u,[["render",d],["__file","3.erchasousuoshu.html.vue"]]);export{g as default};
