import{_ as n,o as s,c as a,a as p}from"./app-s8JulthU.js";const t="/assets/1707846872324-VMmb7ruu.png",e="/assets/1707908801889-OxS_rnxi.png",o="/assets/1707909370834-xdfU3nUW.png",c="/assets/1707922817636-V_6-SlTs.png",l="/assets/1707924598495-whDR-D80.png",i="/assets/1708009756725-xWzTlyYR.png",u="/assets/1708009994021-nuaf3lGO.png",k="/assets/1708010435680-YQlRU4cn.png",r="/assets/1708010253872-4SRWWaVT.png",d={},v=p('<h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><ol><li>每个节点平衡因子只可能是-1,0,1, 如果平衡因子的绝对值超过1，就称之为 <code>失衡</code></li><li>搜索、添加、删除的时间复杂度是O(logn)</li></ol><p><img src="'+t+'" alt="1707846872324"></p><ol start="3"><li>AVL树可以看做是BST+自平衡操作</li></ol><h2 id="查询操作" tabindex="-1"><a class="header-anchor" href="#查询操作" aria-hidden="true">#</a> 查询操作</h2><p>因为自平衡的存在，AVL树的左右子树高度差始终是-1,0,1, 因此查询的时间复杂度就等于树的高度, 也就是log(n), n是节点个数，这是相较于普通BST的优势。</p><h2 id="添加导致的失衡-分析" tabindex="-1"><a class="header-anchor" href="#添加导致的失衡-分析" aria-hidden="true">#</a> 添加导致的失衡（分析)</h2><blockquote><p>如果添加导致了失衡，会影响哪些节点？哪些</p></blockquote><ul><li>失衡的是所有祖先节点（除了父节点)</li><li>不会失衡的是父节点以及非祖先节点</li></ul><blockquote><p>如何解决</p><p>找到失衡的节点，进行旋转操作。</p></blockquote><p>定义3个关键节点</p><ul><li>n: 新元素的父节点，元素插入的节点</li><li>p: n的父节点</li><li>g: p的父节点，也就是n的祖父节点</li></ul><h3 id="情况1-ll-右旋转" tabindex="-1"><a class="header-anchor" href="#情况1-ll-右旋转" aria-hidden="true">#</a> 情况1: LL-右旋转</h3><p>从g-&gt;p是向左，p-&gt;n是向左，这种失衡称为LL, 解决的办法是把g-&gt;p形成的向量围绕着g顺时针旋转</p><blockquote><p>LL-右旋转需要做的变化, -&gt;表示要指向的节点:</p><ul><li>g.left -&gt; p.right</li><li>p.right -&gt; g</li><li>g.parent -&gt; p</li><li>p.right.parent -&gt; g</li><li>更新g, p的高度，先更新g, 然后更新p，因为此时g是p的子节点</li></ul></blockquote><p><img src="'+e+'" alt="1707908801889"></p><h3 id="情况2-rr-左旋转" tabindex="-1"><a class="header-anchor" href="#情况2-rr-左旋转" aria-hidden="true">#</a> 情况2：RR-左旋转</h3><p>如果从g到n的方向是 <code>Right-Right</code>,就成为 <code>RR</code>失衡, 解决的办法是g-&gt;p形成的向量围绕着g逆时针旋转。</p><blockquote><p>RR-左旋转需要做的变化</p><ul><li>g.right -&gt; p.left;</li><li>p.left -&gt; g</li><li>g.parent -&gt; p</li><li>p.left.parent -&gt; g</li><li>更新g,p的高度，先更新g, 再更新p</li></ul></blockquote><p><img src="'+o+'" alt="1707909370834"></p><h3 id="情况3-lr-双旋转" tabindex="-1"><a class="header-anchor" href="#情况3-lr-双旋转" aria-hidden="true">#</a> 情况3: LR-双旋转</h3><p>先左旋变成LL，再右旋</p><p><img src="'+c+'" alt="1707922817636"></p><h3 id="情况4-lr-双旋转" tabindex="-1"><a class="header-anchor" href="#情况4-lr-双旋转" aria-hidden="true">#</a> 情况4：LR-双旋转</h3><p>先右旋变成RR, 再左旋</p><p><img src="'+l+`" alt="1707924598495"></p><h2 id="添加导致的失衡-代码实现" tabindex="-1"><a class="header-anchor" href="#添加导致的失衡-代码实现" aria-hidden="true">#</a> 添加导致的失衡（代码实现)</h2><p>写代码之前，我们先思考一下，AVL树失衡与再平衡的细节问题。</p><ul><li>AVL树是一棵BST</li><li>AVL树的添加操作可以复用BST的算法逻辑，也就是说一定是添加到叶子节点的后面</li><li>AVL树在添加一个节点会导致哪些节点失衡？ <ul><li>父节点会失衡吗？不会，因为父节点要么度为0，要么度为1，加了一个节点左右子树的高度差仍然&lt;=1</li><li>祖父节点会失衡吗？有可能，分三种情况讨论 <ul><li>如果祖父节点平衡因子是0，那么添加之后会变成1或者-1，仍然平衡;</li><li>如果祖父节点平衡因子是-1，那么添加之后会变成-2, 失衡</li><li>如果组父节点平衡因子是1，那么添加之后会变成2， 失衡</li></ul></li><li>祖父节点的父节点以及祖父节点会失衡吗？ <ul><li>如果祖父节点不失衡，那么其父节点和祖父节点一定不会失衡，因为新添加的节点并没有引起祖父节点这颗子树高度的变化。</li><li>如果祖父节点失衡，那么其父节点和祖父节点一定会失衡，因为以祖父节点为根节点的这课子树的高度发生了变化</li></ul></li><li>兄弟节点，父节点的兄弟节点会失衡吗? 显然不会，因为并未引起他们子树高度的变化</li></ul></li><li>AVL树在调整平衡后，需要迭代或者递归的去调整父节点的平衡吗？答案是不需要 <ul><li>假设我们找到了第一个失衡的节点，经过调整这颗子树的高度会比调整前减少1，而调整前的高度是多了1，因此这颗子树的高度实际上是恢复到调整前的，因此调整前后失衡节点的所有父节点的平衡因子保持不变。</li></ul></li></ul><p>一句话总结下:</p><p>新增一个节点，要么不会使得整棵树失衡，要么只会导致祖父节点及其所有父节点失衡，而且只需要调整以第一个失衡的祖宗节点为根节点的子树，就可以使整棵树重新平衡</p><p>为了方便计算平衡因子，我们在BST节点的基础上引入height高度属性，添加之后迭代更新父节点高度，算法如下，</p><ul><li>BST算法添加一个节点</li><li>迭代其父节点，重新计算父节点的高度，迭代的终止条件是父节点为空，也就是到了根节点</li><li>计算完之后判断一下父节点是否仍然平衡 <ul><li>如果平衡，继续迭代</li><li>如果不平衡，调整以不平衡节点为根节点的子树，退出迭代</li></ul></li></ul><h3 id="扩展bst的添加方法" tabindex="-1"><a class="header-anchor" href="#扩展bst的添加方法" aria-hidden="true">#</a> 扩展BST的添加方法</h3><p>考虑到AVL树和BST的关系是 <code>is-a</code>, 可以使用继承,</p><ul><li>AVLTree继承BST</li><li>AVLNode继承BST.Node</li></ul><p>注意AVLNode.height初始值为1，因为在再平衡方法中是从新节点的父节点开始迭代计算高度，因此这个初始值相当于迭代的初始条件，添加的时候就可以知道一定是1</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AVLTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BinarySearchTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BinarySearchTree<span class="token punctuation">.</span>Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="再平衡方法的框架" tabindex="-1"><a class="header-anchor" href="#再平衡方法的框架" aria-hidden="true">#</a> 再平衡方法的框架</h3><p>在BST的add方法中增加调整的方法fixAfterInsertion, 由子类AVL去实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">// 增加元素后调整</span>
            <span class="token function">fixAfterInsertion</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>
        <span class="token keyword">int</span> cmp<span class="token punctuation">;</span>

        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            parent <span class="token operator">=</span> p<span class="token punctuation">;</span>
            cmp <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> parent<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token keyword">else</span> parent<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 增加元素后调整</span>
        <span class="token function">fixAfterInsertion</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fixAfterInsertion方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fixAfterInsertion</span><span class="token punctuation">(</span><span class="token class-name">BinarySearchTree<span class="token punctuation">.</span>Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// node是新插入的节点，因为是BST，node一定是叶子节点</span>
        <span class="token comment">// 所以第一次node=node.parent, node指向了n，第二次指向了p，第三次指向了g...</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>node <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    <span class="token comment">// 迭代地自底向上更新高度</span>
            <span class="token function">updateHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
            <span class="token comment">// 所以node的子节点的高度已经是最新的了，</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isBalanced</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 再平衡</span>
                <span class="token function">reBalance</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 父节点一定是平衡了，不需要重新计算高度</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新节点高度的方法" tabindex="-1"><a class="header-anchor" href="#更新节点高度的方法" aria-hidden="true">#</a> 更新节点高度的方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> leftHeight <span class="token operator">=</span> left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> left<span class="token punctuation">)</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>
            <span class="token keyword">int</span> rightHeight <span class="token operator">=</span> right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> right<span class="token punctuation">)</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftHeight<span class="token punctuation">,</span> rightHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="平衡因子的计算方法" tabindex="-1"><a class="header-anchor" href="#平衡因子的计算方法" aria-hidden="true">#</a> 平衡因子的计算方法</h3><p>更新完高度，就可以去计算平衡因子了， 也就是左子树高度-右子树高度</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">balanceFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> leftHeight <span class="token operator">=</span> left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> left<span class="token punctuation">)</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>
            <span class="token keyword">int</span> rightHeight <span class="token operator">=</span> right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> right<span class="token punctuation">)</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>
            <span class="token keyword">return</span> leftHeight <span class="token operator">-</span> rightHeight<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="⭐️-核心-再平衡方法" tabindex="-1"><a class="header-anchor" href="#⭐️-核心-再平衡方法" aria-hidden="true">#</a> ⭐️ (核心)再平衡方法</h3><p>需要注意几个点</p><ul><li>代码中的n, p, g是参考了前面的分析，n是新增节点的父节点，p是n的父节点，g是p的父节点</li><li>在迭代过程中，我们可以直接得到g, p其实就是p的height较高的子节点，同理，n也是p的高度较高的子节点</li><li>有了n, p, g 可以很方便的判断是LL，RR，LR，RL中的哪种情况，根据对应的情况调用左旋，右旋方法</li><li>左旋右旋方法中做完了需要 <ul><li>先更新p,g的左右指针</li><li>更新所有变化节点的parent</li><li>更新p,g高度，因为旋转会改变p, g的左右子树。注意先更新调整后较低的g节点，再更新p节点</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reBalance</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 找到n, p, g</span>
        <span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> node<span class="token punctuation">;</span>
        <span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">tallerChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> n <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">tallerChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// LL-右旋转</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">isLeftChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span><span class="token function">isLeftChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">rotateRight</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// LR-左旋转+右旋转</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">isLeftChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span><span class="token function">isRightChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">rotateLeft</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">rotateRight</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// RR-左旋转</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">isRightChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span><span class="token function">isRightChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">rotateLeft</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// RL-右旋转+左旋转</span>
        <span class="token function">rotateRight</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">rotateLeft</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * |                  |
     *  g                 p
     * /   \\             / \\
     * p    y   =&gt;      n   g
     * / \\                 /  \\
     * n pRight      pRight    y
     *
     * <span class="token keyword">@param</span> <span class="token parameter">node</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 带入p,g,pRight</span>
        <span class="token keyword">final</span> <span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> g <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> g<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> pRight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>

        <span class="token comment">// 1. 更新左右</span>
        g<span class="token punctuation">.</span>left <span class="token operator">=</span> pRight<span class="token punctuation">;</span>
        p<span class="token punctuation">.</span>right <span class="token operator">=</span> g<span class="token punctuation">;</span>

        <span class="token comment">// 2.更新parent</span>
        <span class="token comment">// 2.1 更新p的parent</span>
        p<span class="token punctuation">.</span>parent <span class="token operator">=</span> g<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">isLeftChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">isRightChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            root <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.2 更新pRight的parent</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pRight<span class="token punctuation">.</span>parent <span class="token operator">=</span> g<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.3 更新g的parent</span>
        g<span class="token punctuation">.</span>parent <span class="token operator">=</span> p<span class="token punctuation">;</span>

        <span class="token comment">// 3. 更新高度，先g后p</span>
        <span class="token function">updateHeight</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">updateHeight</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 带入p, g, pLeft</span>
        <span class="token keyword">final</span> <span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> g <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> g<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> pLeft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AVLNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token comment">// 1. 更新左右节点</span>
        g<span class="token punctuation">.</span>right <span class="token operator">=</span> pLeft<span class="token punctuation">;</span>
        p<span class="token punctuation">.</span>left <span class="token operator">=</span> g<span class="token punctuation">;</span>

        <span class="token comment">// 2. 更新parent</span>
        <span class="token comment">// 2.1 让p称为根节点</span>
        p<span class="token punctuation">.</span>parent <span class="token operator">=</span> g<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">isLeftChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">isRightChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            root <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 2.2 让pLeft.parent指向g, 注意pLeft可能为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pLeft <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pLeft<span class="token punctuation">.</span>parent <span class="token operator">=</span> g<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 2.3 让g.parent指向p</span>
        g<span class="token punctuation">.</span>parent <span class="token operator">=</span> p<span class="token punctuation">;</span>

        <span class="token comment">// 更新高度, 先更新g, 再更新p</span>
        <span class="token function">updateHeight</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">updateHeight</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除导致的失衡-分析" tabindex="-1"><a class="header-anchor" href="#删除导致的失衡-分析" aria-hidden="true">#</a> 删除导致的失衡 （分析)</h2><p>类似添加，删除导致的失衡，也有LL， RR， LR， RL四种情况</p><h3 id="情况1-ll" tabindex="-1"><a class="header-anchor" href="#情况1-ll" aria-hidden="true">#</a> 情况1：LL</h3><p><img src="`+i+'" alt="1708009756725"></p><h3 id="情况2-rr" tabindex="-1"><a class="header-anchor" href="#情况2-rr" aria-hidden="true">#</a> 情况2：RR</h3><p><img src="'+u+'" alt="1708009994021"></p><h3 id="情况3-lr" tabindex="-1"><a class="header-anchor" href="#情况3-lr" aria-hidden="true">#</a> 情况3：LR</h3><p><img src="'+k+'" alt="1708010435680"></p><h3 id="情况4-rl" tabindex="-1"><a class="header-anchor" href="#情况4-rl" aria-hidden="true">#</a> 情况4：RL</h3><p><img src="'+r+`" alt="1708010253872"></p><blockquote><p>问题1： 先思考一下，删除一个节点会导致哪些节点失去平衡?</p></blockquote><ol><li>父节点和祖先节点</li></ol><p>删除一个节点相当于父节点的平衡因子+1或者-1，</p><ul><li>如果父节点平衡因子是0，那无论+-1都不会引起父节点失衡，并且由于父节点的高度也没有变化，那父节点的祖先节点也不会失衡</li><li>如果父节点平衡因子是1，也就是左子树=右子树高度+1， <ul><li>如果删除的是右子树的节点，平衡因子变成2，失衡， 但父节点高度不会变化，仍然等于左子树高度，因此父节点的所有祖宗都不会失衡</li><li>如果删除的是左子树，平衡因子变成0，不失衡，但是父节点的高度会减少1，如果父节点是祖父节点中较短的子树，那么祖父节点也会失衡，但是祖父节点的高度不会变，因此祖父节点的祖宗节点不会失衡</li></ul></li></ul><ol start="2"><li>兄弟节点和叔节点</li></ol><p>很明显，由于并没有改变兄弟节点或者叔叔节点的高度，因此也不会导致他们失衡</p><p>因此可以得到结论，</p><ul><li>删除一个节点不一定导致树的失衡，</li><li>一旦失衡，只可能引起一个节点失衡，因为失衡的节点一定是其父节点较低的子树，所以父节点的高度不变不会失衡。</li></ul><p>问题2：如果失衡，需要调整几次</p><p>由于调整平衡相当于这颗子树的高度-1，那么就会导致父节点可能会失衡，因此还要调整父节点，父节点调整完高度又-1，如果父节点是祖父节点较低的子树，那么就不需要调整，但如果父节点是祖父较高的</p><p>子树，则又要调整祖父节点，依次类推。每一层都要调整，因此最多需要调整log(n)次。</p><p>对比一下添加和删除操作</p><ul><li>添加1个元素会导致祖父节点及其所有祖宗节点失衡，但调整只需要1-2次 （单旋or双旋)</li><li>删除1个元素只会导致一个祖宗节点失衡，但最多需要调整log(n)次</li></ul><h2 id="删除导致的失衡-代码实现" tabindex="-1"><a class="header-anchor" href="#删除导致的失衡-代码实现" aria-hidden="true">#</a> 删除导致的失衡（代码实现)</h2><p>代码很简单，思路也是类似添加调整算法的迭代+调整，只有一个地方不同，删除的调整操作需要从下到上一直迭代到根节点</p><h3 id="扩展bst的删除方法" tabindex="-1"><a class="header-anchor" href="#扩展bst的删除方法" aria-hidden="true">#</a> 扩展BST的删除方法</h3><p>因为AVL树继承了BST树，可以服用deleteNode逻辑，并在父节点与被删除节点断开连接后增加fixAfterRemoval方法，重点关注这个方法的位置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        size<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token comment">// 度为2</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">degree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token function">successor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>element <span class="token operator">=</span> s<span class="token punctuation">.</span>element<span class="token punctuation">;</span>
            node <span class="token operator">=</span> s<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// node的度一定是0或者1</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> replacement <span class="token operator">=</span> node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> node<span class="token punctuation">.</span>left <span class="token operator">:</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token comment">// 度为1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>replacement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            replacement<span class="token punctuation">.</span>parent <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                root <span class="token operator">=</span> replacement<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> replacement<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> replacement<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// node断开连接</span>
            node<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

            <span class="token comment">// 从replacement开始修复</span>
            <span class="token function">fixAfterRemoval</span><span class="token punctuation">(</span>replacement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 度为0, node是叶子节点</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token comment">// 不需要修复</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 删除的叶子节点，由于父节点已经断开了与node的连接, 所以修复node节点即可</span>
            <span class="token function">fixAfterRemoval</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="⭐️-核心-再平衡方法-1" tabindex="-1"><a class="header-anchor" href="#⭐️-核心-再平衡方法-1" aria-hidden="true">#</a> ⭐️ (核心)再平衡方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>

 <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fixAfterRemoval</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 首先要注意传入的node不可能为空</span>
        <span class="token comment">// 其次，删除某个节点只会影响父节点的平衡，所以迭代去修复父节点即可</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>node <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 重新计算高度</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBalanced</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">updateHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">reBalance</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 因为再平衡会导致父节点左右子树的高度发生变化，所以需要继续递归</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="avl树操作的复杂度分析" tabindex="-1"><a class="header-anchor" href="#avl树操作的复杂度分析" aria-hidden="true">#</a> AVL树操作的复杂度分析</h2><ul><li>size(), isEmpty(): O(1)</li><li>find(): 由于自平衡的功能，AVL的最差、最好、平均时间复杂度都是O(logn), 这是与普通BST相比的优势</li><li>add()：查询的时间复杂度O(logn), 调整是固定的1次或2次，也就是O(1), 因此整体的复杂度是O(logn)</li><li>remove(): 查询的时间复杂度O(logn), 调整的复杂度最好O(1)，最差调整O(logn), 平均是O(logn), 因此整体的复杂度也是O(logn)</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>AVL树可以看做是BST+添加删除后的自平衡</li><li>AVL的查询操作能稳定在O(logn)的复杂度，这是相比与普通BST的优势</li><li>再平衡的算法包括LL-右旋，RR-左旋，LR-左旋+右旋，RL-右旋+左旋</li><li>复杂度</li></ol><table><thead><tr><th>操作</th><th>最坏时间复杂度</th><th>最好时间复杂度</th><th>平均时间复杂度</th></tr></thead><tbody><tr><td>size()</td><td>O(1)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>find()</td><td>O(logn)</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>add()</td><td>O(logn)</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>remove()</td><td>O(logn)</td><td>O(logn)</td><td>O(logn)</td></tr></tbody></table>`,87),m=[v];function b(g,h){return s(),a("div",null,m)}const y=n(d,[["render",b],["__file","5.AVLshu.html.vue"]]);export{y as default};
