import{_ as p,o as t,c as e,a,d as n,e as s}from"./app-s8JulthU.js";const c="/assets/1708080802669-9L82OWPM.png",o="/assets/1708086778863-qNAi38qd.png",l="/assets/1708087941387-XDORuVkm.png",i="/assets/1708085301776-sHQgp4gl.png",u="/assets/1708095948482-_V9v3GKg.png",k="/assets/1708089812905-kFGsKWwP.png",r="/assets/1708090520575-xNqcuQfY.png",d="/assets/1708092026281-A1F-y8L4.png",m="/assets/1708092392082-5ywtAaOp.png",v="/assets/1708093232978-U0WEpxk9.png",b="/assets/1708093512417-8Szcwec1.png",g="/assets/1708094846880-XPBTqBjI.png",h="/assets/1708137042804-eR7nBgxG.png",f="/assets/1708137370451-ckJMDNPu.png",y="/assets/1708137847540-yVsuOIY3.png",w="/assets/1708146321116-FwbiAbjN.png",B="/assets/1708147092141-gRw2HlC8.png",_="/assets/1708147578231-xJILHjyN.png",R="/assets/1708147908126-yByoroh7.png",L="/assets/1708148124462-D1b987-1.png",x="/assets/1708150524132-cbI5c-E4.png",E="/assets/1708152279260-i4yZn2AM.png",N="/assets/1708163166633-g7vZRT8F.png",A="/assets/1708163084564-gVYBP4xJ.png",C={},K=a('<h2 id="什么是红黑树" tabindex="-1"><a class="header-anchor" href="#什么是红黑树" aria-hidden="true">#</a> 什么是红黑树</h2><p>首先，红黑树是一棵二叉搜索树BST, 其次红黑树是一棵自平衡树。它为了保持自平衡，在每次添加或者删除操作后都需要满足以下几条性质</p><ol><li>所有的节点不是黑色就是红色</li><li>根节点是黑色</li><li>叶子节点是null，并且是黑色</li><li>红色节点的子节点必须是黑色，等价的说法是不能有2个红色节点相连，或者不能有2个连续的红色节点，或者红色节点的叶子节点只能是黑色</li><li>红黑树是黑色平衡的，等价的说法是从根节点出发到叶子节点的所有路径的黑色节点个数都是相等的</li></ol><p><img src="'+c+'" alt="1708080802669"></p><p>第一次接触红黑树都会一脸懵逼，主要的问题在于，无法理解这五条性质是怎么来的？为什么这5条性质满足了红黑树就能自平衡了呢？</p><p>这需要先去了解红黑树的本质--- 4阶B树</p><h2 id="_4阶b树转化为红黑树" tabindex="-1"><a class="header-anchor" href="#_4阶b树转化为红黑树" aria-hidden="true">#</a> 4阶B树转化为红黑树</h2><p>先来一颗4阶B树，或者叫2-3-4树</p><p><img src="'+o+'" alt="1708086778863"></p><p>把这棵4阶B树做如下变性操作</p><ol><li>如果一个节点只有一个元素，不做处理</li><li>如果一个节点有2个元素，使用向左的红色箭头连接2个元素</li><li>如果一个节点有3个元素，中间的元素使用2个红色箭头连接2个元素，箭头方向朝外</li><li>所有的元素变成独立的节点</li><li>为了方便表示，我们把红色箭头信息保存在节点中，即：被红色箭头指向的节点涂成红色</li><li>为了迎合红黑树的定义，我们把其它节点涂成黑色。</li><li>为了方便观察，我们【格式化】一下，按照二叉树的一般画法重新画这棵树，就得到了一颗红黑树</li></ol><p>仔细观察这棵红黑树，红黑树的5条性质都是满足的</p><p><img src="'+l+'" alt="1708087941387"></p><h2 id="红黑树转化为4阶b树" tabindex="-1"><a class="header-anchor" href="#红黑树转化为4阶b树" aria-hidden="true">#</a> 红黑树转化为4阶B树</h2><p>如下图，有一棵红黑树，我们把红色节点与它的黑色父节点合并成一个节点，并且左子红色节点放在黑色节点的左边，右子红色节点放在黑色节点的右边，这样就得到一棵B树。</p><p>由于一个黑色节点最多连2个红色，所以B树的一个节点最多有3个元素，所以是一棵4阶B树</p><p><img src="'+i+'" alt="1708085301776"></p><p>因为红黑树和4阶B树可以相互转换，因此，我们说红黑树和4阶B树是 <code>等价的</code></p><p>既然是等价的，在对一棵红黑树进行添加和删除操作的时候，我们可以使用与它等价的4阶B树来进行算法的设计。</p><h2 id="使用代码定义红黑树" tabindex="-1"><a class="header-anchor" href="#使用代码定义红黑树" aria-hidden="true">#</a> 使用代码定义红黑树</h2><p>我们知道，红黑树是一棵BST，结合之前AVL树，BST的讨论我们可以得出以下类图</p><p><img src="'+u+`" alt="1708095948482"></p><p>我们定义RBTree为红黑树，继承了BalancedBST (平衡二叉搜索树)，BalancedBST继承了BST，BST实现了二叉树BinaryTree接口</p><p>首先是BalancedBST, 其实就是把左旋右旋的操作提出来了，方便子类复用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cc<span class="token punctuation">.</span>hammarr<span class="token punctuation">.</span>binarytree</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BalancedBinarySearchTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BinarySearchTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * |                  |
     *  g                 p
     * /   \\             / \\
     * p    y   =&gt;      n   g
     * / \\                 /  \\
     * n pRight      pRight    y
     *
     * <span class="token keyword">@param</span> <span class="token parameter">node</span>
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 带入p,g,pRight</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> g <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span>  g<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> pRight <span class="token operator">=</span>  p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>

        <span class="token comment">// 1. 更新左右</span>
        g<span class="token punctuation">.</span>left <span class="token operator">=</span> pRight<span class="token punctuation">;</span>
        p<span class="token punctuation">.</span>right <span class="token operator">=</span> g<span class="token punctuation">;</span>

        <span class="token comment">// 2.更新parent</span>
        <span class="token comment">// 2.1 更新p的parent</span>
        p<span class="token punctuation">.</span>parent <span class="token operator">=</span> g<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">isLeftChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">isRightChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            root <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.2 更新pRight的parent</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pRight <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pRight<span class="token punctuation">.</span>parent <span class="token operator">=</span> g<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.3 更新g的parent</span>
        g<span class="token punctuation">.</span>parent <span class="token operator">=</span> p<span class="token punctuation">;</span>

       <span class="token function">afterRotate</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 带入p, g, pLeft</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> g <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> g<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> pLeft <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token comment">// 1. 更新左右节点</span>
        g<span class="token punctuation">.</span>right <span class="token operator">=</span> pLeft<span class="token punctuation">;</span>
        p<span class="token punctuation">.</span>left <span class="token operator">=</span> g<span class="token punctuation">;</span>

        <span class="token comment">// 2. 更新parent</span>
        <span class="token comment">// 2.1 让p称为根节点</span>
        p<span class="token punctuation">.</span>parent <span class="token operator">=</span> g<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">isLeftChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">isRightChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            root <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 2.2 让pLeft.parent指向g, 注意pLeft可能为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pLeft <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pLeft<span class="token punctuation">.</span>parent <span class="token operator">=</span> g<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 2.3 让g.parent指向p</span>
        g<span class="token punctuation">.</span>parent <span class="token operator">=</span> p<span class="token punctuation">;</span>

        <span class="token comment">// 更新高度, 先更新g, 再更新p</span>
        <span class="token function">afterRotate</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterRotate</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> g<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RBTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BalancedBinarySearchTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">BLACK</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// 这是BinarySearchTree类中的方法，因为创建的节点可能是AVL树节点（包含高度信息)，也可能是RBTree节点(包含颜色信息)，因此BST中抽出这个方法供子类实现</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RBNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 红黑树节点的定义，在BST节点的基础上增加了color属性</span>
    <span class="token comment">// 这里使用boolean值，true就是RED，false就是BLACK</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RBNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BinarySearchTree<span class="token punctuation">.</span>Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> color<span class="token punctuation">;</span>

        <span class="token class-name">RBNode</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token constant">RED</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

	<span class="token comment">// 用于获取兄弟节点，因为下面添加和删除都需要知道兄弟节点或者叔叔节点，因此需要这个方法</span>
        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">sibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLeftChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRightChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里引入了BalancedBST, 其实是将AVL树和RB树的旋转操作抽出来，这属于自平衡树所拥有的操作。</p><p>或许这里还不理解为什么RB树需要旋转，往下看就明白了。</p><h2 id="红黑树的添加操作" tabindex="-1"><a class="header-anchor" href="#红黑树的添加操作" aria-hidden="true">#</a> 红黑树的添加操作</h2><h3 id="_1-添加的节点一定是b树的叶子节点" tabindex="-1"><a class="header-anchor" href="#_1-添加的节点一定是b树的叶子节点" aria-hidden="true">#</a> 1. 添加的节点一定是B树的叶子节点</h3><p>B的添加过程是从根节点开始比大小，只要你不是叶子节点，那一定有比你大或者小的下层节点，因此，无论什么值，最终一定都是找到叶子节点处，然后在叶子节点中从左到右找一个合适的位置插入。</p><h3 id="_2-红黑树能转化为b树叶子节点的几种情况" tabindex="-1"><a class="header-anchor" href="#_2-红黑树能转化为b树叶子节点的几种情况" aria-hidden="true">#</a> 2. 红黑树能转化为B树叶子节点的几种情况</h3><p>如下，可以知道，红黑树能作为B树叶子节点的最后几层元素无非以下4种情况，因此我们讨论添加一个元素的情况也按这4类进行讨论</p><p><img src="`+k+'" alt="1708089812905"></p><h3 id="_3-插入节点的分情况讨论" tabindex="-1"><a class="header-anchor" href="#_3-插入节点的分情况讨论" aria-hidden="true">#</a> 3. 插入节点的分情况讨论</h3><p>为了能尽量地匹配红黑树的5条性质，规定新增的节点都是红色。</p><blockquote><p>可以思考下为什么要插入红色？</p><p>如果插入黑色，那么这条路径一定不是黑色平衡的，为了达到平衡，我们可能既需要变色，又要旋转。</p><p>而如果插入红色，我们只需要考虑是否需要旋转，算法会简单很多</p></blockquote><p>结合2的分析，乍一看我们似乎有12种情况需要考虑，但是我们思考一下</p><ul><li>如果我们插入的节点是黑色节点，那么其实我们什么都不用做，因为红黑树的性质已经满足了。这样就少了4种情况，那么只剩下8种需要讨论</li></ul><p><img src="'+r+'" alt="1708090520575"></p><h4 id="约定" tabindex="-1"><a class="header-anchor" href="#约定" aria-hidden="true">#</a> 约定</h4><ul><li>新增的节点叫n，</li><li>插入的节点叫p (n.parent 父亲)，</li><li>插入的节点的父节点叫g (n.parent.parent祖父),</li><li>p的兄弟节点叫u (uncle 叔叔)</li></ul><h4 id="情况1-2-5-6-插入到黑色节点下面" tabindex="-1"><a class="header-anchor" href="#情况1-2-5-6-插入到黑色节点下面" aria-hidden="true">#</a> 情况1，2，5，6：插入到黑色节点下面</h4><p>什么都不用做，满足条件</p><h4 id="情况3-红黑-插入红的左边-ll-染色" tabindex="-1"><a class="header-anchor" href="#情况3-红黑-插入红的左边-ll-染色" aria-hidden="true">#</a> 情况3：红黑，插入红的左边 - LL+染色</h4><p>如果，有50(黑)，40（红)的两个节点，我们要插入30, 也就是插入到40的左边。</p><p>这种情况对应4阶B树只有2个元素的叶子节点，<strong>因此再容纳一个也不会产生上溢。</strong></p><p><strong>因此这种情况的红黑树也不需要改变影响上一层的节点。</strong> 我们要做的就是想办法把30，40，50放到一个B树节点中。</p><p>很明显，我们把40作为中间节点，30和50放在两边，让上层的节点指向40不就行了。</p><p>这其实就是右旋+染色, 伪代码就是:</p><ul><li>p.color=BLACK</li><li>g.color=RED</li><li>rotateRight(g)</li></ul><p><img src="'+d+'" alt="1708092026281"></p><h4 id="情况4-红黑-插入红的右边-lr-双旋-染色" tabindex="-1"><a class="header-anchor" href="#情况4-红黑-插入红的右边-lr-双旋-染色" aria-hidden="true">#</a> 情况4：红黑，插入红的右边-LR-双旋+染色</h4><p>思路跟情况3差不多，也只是调整n,p,g的相对位置以及颜色就能满足红黑树的性质，看图说话，</p><p>需要p左旋，然后g右旋，因为旋转后n,p,g的父子关系会发生变化，所以建议先染色，再旋转 （当然也可以用临时变量记录n,p,g，先旋转再染色)</p><p>伪代码如下:</p><ul><li>n.color=black</li><li>g.color=red</li><li>rotateLeft(p)</li><li>rotateRight(g)</li></ul><p><img src="'+m+'" alt="1708092392082"></p><h4 id="情况8-黑红-插入红的右边-rr-染色" tabindex="-1"><a class="header-anchor" href="#情况8-黑红-插入红的右边-rr-染色" aria-hidden="true">#</a> 情况8：黑红，插入红的右边-RR+染色</h4><p><img src="'+v+'" alt="1708093232978"></p><h4 id="情况7-黑红-插入红的左边-rl-染色" tabindex="-1"><a class="header-anchor" href="#情况7-黑红-插入红的左边-rl-染色" aria-hidden="true">#</a> 情况7：黑红，插入红的左边-RL+染色</h4><p>这个其实跟情况4是对称的，经过前面的分析，无需赘述。</p><p>伪代码如下：</p><ul><li>n.color=BLACK</li><li>g.color=RED</li><li>rotateRight(p)</li><li>rotateLeft(g)</li></ul><p><img src="'+b+'" alt="1708093512417"></p><h4 id="情况9-10-11-12-红黑红-染色加向上迭代-或者递归-插入" tabindex="-1"><a class="header-anchor" href="#情况9-10-11-12-红黑红-染色加向上迭代-或者递归-插入" aria-hidden="true">#</a> 情况9，10，11，12：红黑红，染色加向上迭代（或者递归)插入</h4><p>这4种情况的处理方式其实是一样的，将g染成红色，将p和u染成黑色，然后递归或者迭代的向上插入g即可，迭代的处理可以复用之前讨论的所有情况的逻辑</p><p>对比4阶B树，其实就是叶子节点已经有3个节点了，再插入一个节点就会产生上溢，在B树的做法就是插入后取中间位置的节点进入上一层，如果上一层仍然上溢，则继续向上传播，直到根节点。</p><p>伪代码如下：</p><ul><li>g.color=RED</li><li>p.color=BLACK</li><li>u.color=BLACK</li><li>add(g) (递归)</li></ul><p><img src="'+g+`" alt="1708094846880"></p><h4 id="如果区分双红还是单红" tabindex="-1"><a class="header-anchor" href="#如果区分双红还是单红" aria-hidden="true">#</a> 如果区分双红还是单红</h4><p>通过上面的讨论，大致可以分为以下几种情形</p><ul><li>插入黑色节点的后面，无需处理</li><li>插入红黑或者黑红，也就是单红</li><li>插入红黑红，也就是双红</li></ul><p>那么如何区分单红和双红呢？其实就是判断uncle叔父节点的颜色即可，uncle是黑，就是单红，uncle是红，就是双红。</p><h3 id="_4-代码实现" tabindex="-1"><a class="header-anchor" href="#_4-代码实现" aria-hidden="true">#</a> 4.代码实现</h3><p>回顾一下BST的添加操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">BinaryTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// ....省略</span>

    <span class="token comment">// 添加节点</span>
    <span class="token comment">// 分了2种情况，</span>
    <span class="token comment">// 如果是根节点, 创建新节点，如果不是，找到叶子节点，插入</span>
    <span class="token comment">// 插入后调用后处理方法fixAfterInsertion()传入新创建的节点</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">fixAfterInsertion</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>
        <span class="token keyword">int</span> cmp<span class="token punctuation">;</span>

        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            parent <span class="token operator">=</span> p<span class="token punctuation">;</span>
            cmp <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> parent<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token keyword">else</span> parent<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">fixAfterInsertion</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fixAfterInsertion的逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fixAfterInsertion</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RBNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> parent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RBNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
        <span class="token comment">// 添加的是根节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">color</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 情况1，2，5，6： 父节点是黑色</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBlack</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token comment">// 进入到这里parent一定是红色，判断是单红还是双红</span>
        <span class="token comment">// uncle节点</span>
        <span class="token class-name">RBNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> uncle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RBNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>parent<span class="token punctuation">.</span><span class="token function">sibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 祖父节点</span>
        <span class="token class-name">RBNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> grand <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RBNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parent<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>


        <span class="token comment">// 双红，染色+递归</span>
        <span class="token comment">// 1. parent, uncle染成黑色，grand染成红色</span>
        <span class="token comment">// 2. 祖父节点向上合并</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>uncle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">color</span><span class="token punctuation">(</span>uncle<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">color</span><span class="token punctuation">(</span>grand<span class="token punctuation">,</span> <span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fixAfterInsertion</span><span class="token punctuation">(</span>grand<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 

	<span class="token comment">// 单红的处理, LL, RR, LR, RL</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">isLeftChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">isLeftChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// LL</span>
                <span class="token comment">// parent 染成黑色，grand染成红色, 右旋grand</span>
                <span class="token function">color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>grand<span class="token punctuation">,</span> <span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rotateRight</span><span class="token punctuation">(</span>grand<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// LR</span>
                <span class="token comment">// 自己染成黑色，grand染成红色, 左旋parent，右旋grand</span>
                <span class="token function">color</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>grand<span class="token punctuation">,</span> <span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rotateLeft</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rotateRight</span><span class="token punctuation">(</span>grand<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">isRightChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// RR</span>
                <span class="token comment">// parent染成黑色，grand染成红色，左旋</span>
                <span class="token function">color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>grand<span class="token punctuation">,</span> <span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rotateLeft</span><span class="token punctuation">(</span>grand<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// RL</span>
                <span class="token comment">// 自己染成黑色，grand染成红色，右旋parent， 左旋grand</span>
                <span class="token function">color</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>grand<span class="token punctuation">,</span> <span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rotateRight</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rotateLeft</span><span class="token punctuation">(</span>grand<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="红黑树的删除操作" tabindex="-1"><a class="header-anchor" href="#红黑树的删除操作" aria-hidden="true">#</a> 红黑树的删除操作</h2><h3 id="_1-删除的节点一定是b树叶子节点" tabindex="-1"><a class="header-anchor" href="#_1-删除的节点一定是b树叶子节点" aria-hidden="true">#</a> 1. 删除的节点一定是B树叶子节点</h3><p>回顾一下B树的删除操作，</p>`,83),T=n("ul",null,[n("li",null,"如果删除的是非叶子节点，就找到它的前驱和后继节点，替换后删除。前驱后继怎么找，比如找前驱，就找左子节点，然后一路往右下找，这个节点一定是叶子节点。(因为如果不是叶子结点，那一定有比这个节点更大的节点，而这个更大的节点又一定比要删除的节点要小，所以反证出这个节点一定不是前驱节点，所以前驱节点只能在叶子里。后继节点也是同理。)"),n("li",null,[s("如果删除的是叶子节点，就要看删除后节点是否小于"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"⌈"),n("mfrac",null,[n("mi",null,"m"),n("mn",null,"2")]),n("mo",{stretchy:"false"},"⌉"),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"\\lceil \\frac m2 \\rceil -1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.095em","vertical-align":"-0.345em"}}),n("span",{class:"mopen"},"⌈"),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6954em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.394em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"m")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mclose"},"⌉"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(", 如果小于，就要看兄弟节点有没有能借的 "),n("ul",null,[n("li",null,"如果兄弟节点数量足够，就借一个到父节点，父节点借一个下来与删除元素的节点合并"),n("li",null,"如果兄弟节点数量不够，就从父节点借一个下来与当前节点还有兄弟节点合并成新节点，如果父节点也不够了，则继续向兄弟借或者从父节点取一个合并，一直迭代至根节点")])])],-1),O=a('<p>可以看到B树的删除的都是叶子节点，删除后需要看兄弟节点有没有节点能借，能借则只需要做类似于旋转的操作，不能借则会产生下溢，合并节点，并不断向上传播下溢。</p><p>因此我们也要从红黑树的等价于4阶B树的叶子节点入手，分情况去分析。</p><h3 id="_2-红黑树能转化为b树叶子节点的情况" tabindex="-1"><a class="header-anchor" href="#_2-红黑树能转化为b树叶子节点的情况" aria-hidden="true">#</a> 2. 红黑树能转化为B树叶子节点的情况</h3><p><img src="'+h+'" alt="1708137042804"></p><p>如图共8种情况</p><h3 id="_3-删除节点的分情况讨论" tabindex="-1"><a class="header-anchor" href="#_3-删除节点的分情况讨论" aria-hidden="true">#</a> 3. 删除节点的分情况讨论</h3><h4 id="_3-1-删除红色节点-情况1-3-5-6" tabindex="-1"><a class="header-anchor" href="#_3-1-删除红色节点-情况1-3-5-6" aria-hidden="true">#</a> 3.1 删除红色节点：情况1，3，5，6</h4><p>直接删除，因为不影响红黑树的性质，什么都不用做</p><h4 id="_3-2-删除拥有2个红色节点的黑色节点-情况2" tabindex="-1"><a class="header-anchor" href="#_3-2-删除拥有2个红色节点的黑色节点-情况2" aria-hidden="true">#</a> 3.2 删除拥有2个红色节点的黑色节点：情况2</h4><p>使用黑色节点的左孩子或者右孩子代替它，然后删除红色孩子。其实这个替换的过程，在BST的删除操作中已经实现了，就是删除度为2的节点，寻找它的后继（或者前驱)覆盖当前值，然后删除后继节点。</p><p><img src="'+f+'" alt="1708137370451"></p><h4 id="_3-3-删除拥有一个红色节点的黑色节点-情况4-7" tabindex="-1"><a class="header-anchor" href="#_3-3-删除拥有一个红色节点的黑色节点-情况4-7" aria-hidden="true">#</a> 3.3 删除拥有一个红色节点的黑色节点：情况4，7</h4><p>从4阶B树的角度来看，这个也不会产生下溢，所做就是把黑色节点的红孩子染成黑色，代替他即可。换一种思路，其实就是使用红孩子的元素覆盖它，然后删除红孩子</p><p><img src="'+y+'" alt="1708137847540"></p><h4 id="_3-4-统一3-2-3-3-删除拥有红孩子的黑色节点-替换-删除" tabindex="-1"><a class="header-anchor" href="#_3-4-统一3-2-3-3-删除拥有红孩子的黑色节点-替换-删除" aria-hidden="true">#</a> 3.4. 统一3.2，3.3：删除拥有红孩子的黑色节点，替换+删除</h4><p>从3.2， 3.3的分析，我们可以将算法统一如下：</p><ul><li>如果删除的是黑色节点，它有红孩子，则使用任意一个红孩子的值覆盖它，然后删除红孩子</li></ul><p>其实本质上都是从4阶B树的一个节点删除一个元素，因为这种节点有2个或者3个元素，因此，原地删除即可，不需要影响其它节点，只需要让它符合红黑树的定义即可</p><h4 id="_3-5-删除没有红孩子节点的黑色节点-情况8" tabindex="-1"><a class="header-anchor" href="#_3-5-删除没有红孩子节点的黑色节点-情况8" aria-hidden="true">#</a> 3.5 删除没有红孩子节点的黑色节点：情况8</h4><p>从4阶B树的角度看问题，这个节点只有一个元素，如果删除，必然导致下溢，所以接下来的调整就要看兄弟节点有没有多余的节点。</p><p>兄弟节点什么情况下有多余的节点呢？</p><ul><li>兄弟必须是黑色 （才能跟他同一层做兄弟)</li><li>兄弟必须有红色孩子 （红色侄子)</li></ul><blockquote><p>注意：n是待删除黑色节点，标成灰色，父节点可红可黑，标成紫色</p></blockquote><p><img src="'+w+'" alt="1708146321116"></p><blockquote><p><strong>以下，为了方便讨论，我们默认讨论删除节点是父节点左孩子的情况，删除节点是右孩子的情况是对称的。并且约定</strong></p><ul><li>n: 待删除节点</li><li>p: n的父节点</li><li>s： n的兄弟节点</li><li>NL: n的兄弟节点的左侄子</li><li>NR: n的兄弟节点的右侄子</li><li>灰色：待删除的黑色节点</li><li>紫色：可红可黑不影响结果的节点</li></ul></blockquote><h5 id="_3-5-1-兄弟是黑色-并且兄弟有一个右红孩子" tabindex="-1"><a class="header-anchor" href="#_3-5-1-兄弟是黑色-并且兄弟有一个右红孩子" aria-hidden="true">#</a> 3.5.1 兄弟是黑色，并且兄弟有一个右红孩子</h5><p>这种情况p&gt;s&gt;NR，我们希望的效果是，NR代替之前的s, p代替之前的n, s代替之前p</p><p>伪代码：</p><ul><li>s.color=p.color</li><li>p.color=BLACK</li><li>NR.color=BLACK</li><li>rotateLeft(p)</li></ul><p><img src="'+B+'" alt="1708147092141"></p><h5 id="_3-5-2-兄弟是黑色-并且兄弟有一个左红孩子" tabindex="-1"><a class="header-anchor" href="#_3-5-2-兄弟是黑色-并且兄弟有一个左红孩子" aria-hidden="true">#</a> 3.5.2 兄弟是黑色，并且兄弟有一个左红孩子</h5><p>这时候有p&lt;NL&lt;s, 我们的目标是用NL代替p, s还在之前的位置，p代替n</p><p><img src="'+_+'" alt="1708147578231"></p><p>很明显，我们可以先右旋s, 再左旋p</p><p><img src="'+R+'" alt="1708147908126"></p><h5 id="_3-5-3-兄弟是黑色-并且兄弟右2个左孩子" tabindex="-1"><a class="header-anchor" href="#_3-5-3-兄弟是黑色-并且兄弟右2个左孩子" aria-hidden="true">#</a> 3.5.3 兄弟是黑色，并且兄弟右2个左孩子</h5><p>其实这种情况既可以左旋p，也可以先右旋s再左旋p，为了简单起见，我们左旋p一步到位，这个处理跟3.5.1是一样的</p><p><img src="'+L+'" alt="1708148124462"></p><h5 id="_3-5-4-兄弟是黑色-并且兄弟没有红孩子" tabindex="-1"><a class="header-anchor" href="#_3-5-4-兄弟是黑色-并且兄弟没有红孩子" aria-hidden="true">#</a> 3.5.4 兄弟是黑色，并且兄弟没有红孩子</h5><p>从4阶B树的角度来看，其实就是兄弟也不够借，在B树里的做法就是父节点下来一个与兄弟合并成一个叶子节点，然后父节点的删除行为向上传播。</p><p>这里又有2种情况</p><ul><li>父节点是红色：此时父节点直接借下来染成黑色即可</li><li>父节点是黑色：此时父节点必然只有一个元素（因为父亲的左右都有指向了)，父节点所在层产生下溢，需要递归删除父节点，这样又回到了删除没有红孩子的黑色节点的情况，也就是3.5所讨论的，直到遇到父节点是红色节点或者兄弟有足够的节点可以借的情况</li></ul><p>所以要做的就是</p><ul><li>parentColor = p.color</li><li>p.color=black</li><li>s.color=RED</li><li>if(parentColor==BLACK) fixAfterRemoval(p)</li></ul><p><img src="'+x+'" alt="1708150524132"></p><p><img src="'+E+'" alt="1708152279260"></p><h5 id="_3-5-5-兄弟是红色的分情况讨论" tabindex="-1"><a class="header-anchor" href="#_3-5-5-兄弟是红色的分情况讨论" aria-hidden="true">#</a> 3.5.5 兄弟是红色的分情况讨论</h5><p>兄弟是红色说明了什么问题？</p><ol><li>父节点一定是黑色</li><li>兄弟节点的子节点一定是黑色</li><li>兄弟节点一定有2个黑色节点 (因为从4阶B树的角度看，p, s组成了双元素，双元素必须有3个分叉，再加上n必然是最后一层，因此s下面必须有2个黑色，这样从p到null节点经过的黑色节点才能相等)</li></ol><p><img src="'+N+'" alt="1708163166633"></p><p>我们的想法是，兄弟节点分一个孩子给我当兄弟，也就是父节点的右节点需要指向兄弟的左节点，这不就是左旋吗？因为左旋后sp组成的节点的中心成了s，也就是p的父节点指向了s，那么s必须是黑色节点，所以要把s染成黑色，把p染成红色</p><p><img src="'+A+`" alt="1708163084564"></p><p>因此代码层面，我们可以先处理兄弟是红的情况，然后去处理兄弟为黑的情况</p><ul><li>parent.color=RED</li><li>sibling.color=BLACK</li><li>rotateLeft(parent)</li><li>sibling=parent.right // 主要要更新兄弟</li><li>handleBlackSibling(node)</li></ul><h3 id="_4-删除的代码实现" tabindex="-1"><a class="header-anchor" href="#_4-删除的代码实现" aria-hidden="true">#</a> 4. 删除的代码实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
     * node-待删除节点
     * replacement-取代node的节点
     *
     * <span class="token keyword">@param</span> <span class="token parameter">node</span>
     * <span class="token keyword">@param</span> <span class="token parameter">replacement</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fixAfterRemoval</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> replacement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 删除红色不用处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token comment">// 染色即可</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>replacement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">color</span><span class="token punctuation">(</span>replacement<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> parent <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
        <span class="token comment">// 如果删除的是根节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token comment">// 删除黑色节点</span>
        <span class="token keyword">boolean</span> isLeft <span class="token operator">=</span> parent<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> node <span class="token operator">==</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeft<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> sibling <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token comment">// 兄弟为红</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span>sibling<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">RED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 1. 要把左侄子拿过来当兄弟，所以要左旋p</span>
                <span class="token comment">// 2. 将父亲染红，兄弟染黑，</span>
                <span class="token function">color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>sibling<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rotateLeft</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sibling <span class="token operator">=</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 兄弟为空, 父节点下来并染黑,递归修复父节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span>sibling<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">BLACK</span> <span class="token operator">&amp;&amp;</span> <span class="token function">colorOf</span><span class="token punctuation">(</span>sibling<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">boolean</span> isParentBlack <span class="token operator">=</span> <span class="token function">colorOf</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">BLACK</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>sibling<span class="token punctuation">,</span> <span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isParentBlack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">fixAfterRemoval</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 兄弟为黑, 且至少有一个红孩子</span>
            <span class="token keyword">else</span>  <span class="token punctuation">{</span>
                <span class="token comment">// 我们期望的是RR的情况，这样左旋即可</span>
                <span class="token comment">// 符合RR的右兄弟的左右孩子都是红，或者兄弟的右孩子为红，左孩子为空</span>
                <span class="token comment">// 所以遇到兄弟的左孩子为红，右孩子为空的情况，需要先转成RR的状态</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span>sibling<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">rotateRight</span><span class="token punctuation">(</span>sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 注意更新兄弟，因为侄子变成了兄弟</span>
                    sibling <span class="token operator">=</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token function">color</span><span class="token punctuation">(</span>sibling<span class="token punctuation">,</span> <span class="token function">colorOf</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>sibling<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rotateLeft</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>


        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 对称操作</span>

            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> sibling <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token comment">// 兄弟为红</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span>sibling<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">RED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 1. 要把右侄子拿过来当兄弟，所以要右旋p</span>
                <span class="token comment">// 2. 将父亲染红，兄弟染黑</span>
                <span class="token function">color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>sibling<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rotateRight</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sibling <span class="token operator">=</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 父节点下来并染黑,递归修复父节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span>sibling<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">BLACK</span> <span class="token operator">&amp;&amp;</span> <span class="token function">colorOf</span><span class="token punctuation">(</span>sibling<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">boolean</span> isParentBlack <span class="token operator">=</span> <span class="token function">colorOf</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">BLACK</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>sibling<span class="token punctuation">,</span> <span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isParentBlack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">fixAfterRemoval</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 兄弟为黑, 且至少有一个红孩子</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 兄弟左边是黑，先旋转</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">colorOf</span><span class="token punctuation">(</span>sibling<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">rotateLeft</span><span class="token punctuation">(</span>sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sibling <span class="token operator">=</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token function">rotateRight</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>sibling<span class="token punctuation">,</span> <span class="token function">colorOf</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">color</span><span class="token punctuation">(</span>sibling<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>


        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h2><ul><li>查询：O(logn)</li><li>添加：O(logn)</li><li>删除：O(logn)</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本篇讨论了红黑树是什么以及添加和删除操作</p><ol><li>红黑树可以看做是4阶B树（也叫2-3-4树)的等价变换，是一种自平衡的二叉搜索树</li><li>红黑树的5条性质 <ol><li>所有节点不是红就是黑</li><li>根节点是黑色</li><li>叶子节点为null，并且是黑色</li><li>不能有2个连续的红色节点 ，等价的说法: 红色节点的子节点必须是黑色</li><li>黑色平衡，也就是从根节点到叶子节点经过的黑色节点数量必须相同</li></ol></li><li>红黑树的添加操作 <ol><li>添加操作一定是4阶B树的最后一层，因此必须是红黑树的最后两层</li><li>新添加的元素必须是红色，能最快的满足红黑树的性质</li><li>从插入节点的角度分情况讨论： <ol><li>如果插入的是根节点，染成黑色即可</li><li>父亲是黑色，无需处理</li><li>根据叔叔节点的颜色，判断是红黑红，还是红黑，还是黑红 <ul><li>如果叔叔是红，则是红黑红的情况，此时只需要把父亲和叔叔变黑，祖父变红，递归向上插入祖父</li><li>如果叔叔是黑，则是红黑或者黑红，此时需要判断根据父节点是祖父节点的左孩孩子还是右孩子判断 <ul><li>如果父节是左孩子，自己是左孩子，就是LL的情况，需要把父亲染黑，祖父染红，然后右旋转祖父；</li><li>如果父亲是左孩子，自己是右孩子，就是LR情况，需要把自己染黑，祖父染红，先左旋父亲，再右旋祖父</li><li>如果父亲是右孩子，自己是右孩子，就是RR情况，需要把父亲染黑，祖父染红，然后左旋转祖父</li><li>如果父亲是右孩子，自己是左孩子，就是RL情况，需要把自己染黑，祖父染红，先右旋父亲，再左旋祖父</li></ul></li></ul></li></ol></li></ol></li><li>红黑树的删除操作 <ol><li>删除操作一定是4阶B树的最后一层，因此也必须是红黑树的最后两层</li><li>如果删除的元素有2个孩子，就找它的后继（前驱也行)节点，后继节点的值覆盖它的值，然后处理后继节点</li><li>此时只剩下处理红黑树的最后两层，需要分情况讨论 <ol><li>如果删除的是红色节点，无需处理</li><li>如果删除是有一个红色子节点的黑色节点，将替代的红色节点染成黑色即可</li><li>如果删除的是有2个红色子节点的黑色节点，则使用后继红色节点的值替代它，然后删除红色节点</li><li>如果删除的是没有红色子节点的黑色节点，可以分情况讨论， <ol><li>如果当前节点是左孩子，判断兄弟节点是红还是黑，红色话要把兄弟转成黑色，黑色的话要判断兄弟有没有红孩子可以借 <ol><li>兄弟是黑，兄弟没有孩子，则把兄弟变红，父节点变黑，组成四阶B树的一个叶子节点 <ol><li>如果父节点本来是红，说明父层节点够用，处理完成</li><li>如果父节点本来是黑，说明父层节点只有一个元素，向上递归删除父节点，也就是下溢的向上传播，会导致节点向下合并</li></ol></li><li>兄弟是黑，有一个左红孩子，则先右旋转兄弟，再左旋转父亲，并且把做红孩子染成父亲的颜色，把父亲染成黑，兄弟染成红</li><li>兄弟是黑，有一个右红孩子，则左旋父亲，把兄弟染成父亲的颜色，父亲染成黑，兄弟染成红</li><li>兄弟是黑，有2个红孩子，则执行3的操作</li><li>兄弟是红，则兄弟必有2个黑孩子，则左旋父亲，把兄弟变成黑色，然后执行1-4</li></ol></li><li>如果当前节点是右孩子，镜像执行1的操作。</li></ol></li></ol></li></ol></li><li>复杂度 查询, 添加，删除的复杂度都是O(logn)</li></ol>`,61),D=[K,T,O];function S(j,q){return t(),e("div",null,D)}const V=p(C,[["render",S],["__file","7.hongheishu.html.vue"]]);export{V as default};
