import{_ as l,o as i,c as e,a}from"./app-ZTYo4KDc.js";const t="/assets/image-20240212180731156-0r6tXobZ.png",s="/assets/image-20240212180751081-2rYqjbSB.png",o={},p=a('<p>AVL的旋转</p><p>调整最小不平衡树。旋转可以降低树的高度，这样搜索的logn复杂度就可以降低。</p><p>右单旋转：LL平衡旋转， 第一个L当前节点的左子节点，第二个L是当前节点的左子节点的左节点插入数据导致不平衡。向右旋转一次</p><p><img src="'+t+'" alt="image-20240212180731156"></p><p>左单旋转：RR平衡旋转，右孩子节点的右子节点插入了一条数据，导致了不平衡</p><p><img src="'+s+'" alt="image-20240212180751081"></p><p>先左后右双旋转：LR平衡旋转。在当前节点的左子树的右子树 插入一个节点，导致不平衡</p><ol><li>每个节点不是红就是黑</li><li>根节点必须是黑色</li><li>新增一个节点必须是红色</li><li>每条根节点到叶子节点的路径包含相同数量的黑色节点</li><li>没有一条路径包含2个连续的红色节点</li><li>空节点是黑色</li></ol><p>如果新增/删除一个节点，破坏了这6条规则，怎么办？</p><ol><li>Rebalance: 再平衡 <ul><li>如果我们有黑色的叔节点，就旋转</li><li>如果我们有红色的叔节点，就调换颜色</li></ul></li></ol>',10),n=[p];function c(_,r){return i(),e("div",null,n)}const f=l(o,[["render",c],["__file","HashMapyuanmafenxi.html.vue"]]);export{f as default};
